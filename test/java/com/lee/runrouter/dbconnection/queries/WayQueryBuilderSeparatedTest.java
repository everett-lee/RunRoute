package com.lee.runrouter.dbconnection.queries;

import com.lee.runrouter.bbcalculator.BBCalculator;
import com.lee.runrouter.bbcalculator.ScaledBBCalculator;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class WayQueryBuilderSeparatedTest {
    QueryDirector qd;
    BBCalculator calc;
    QueryBuilder qb;

    private final String TOP_SELECT = "SELECT id, tags, nodes, length, coords, startElevation, endElevation FROM \n";
    private final String WAYS_SUBQUERY = "(SELECT w.id, w.tags, w.nodes FROM planet_osm_ways w) as T1,\n";
    private final String LINE_SUBQUERY_SELECT = "(SELECT  l.osm_id,";
    private final String SELECT_LENGTH = "\tST_Length(l.way::geography) AS length, \n";
    private final String SELECT_CORDS = "\tST_AsText(l.way) AS coords, \n";
    private final String SELECT_START_ELEVATION = "\t(SELECT ST_Value(rast, ST_SetSRID(ST_StartPoint(l.way),4326)) as startElevation\n" +
            "\tFROM elevation\n" +
            "\tWHERE ST_Intersects(rast, ST_SetSRID(ST_StartPoint(l.way),4326)) limit 1), \n";
    private final String SELECT_END_ELEVATION = "\t(SELECT ST_Value(rast, ST_SetSRID(ST_EndPoint(l.way),4326)) as endElevation \n" +
            "\tFROM elevation\n" +
            "\tWHERE ST_Intersects(rast, ST_SetSRID(ST_EndPoint(l.way),4326)) limit 1) \n";
    private final String FROM = "\tFROM planet_osm_line l \n";
    private final String BB = "\tWHERE l.way && ST_Transform( ST_MakeEnvelope(?,?,?,?, 4326),4326)\n";
    private final String ROAD_OPTIONS = "\tAND ((l.highway IN ('trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential', 'living_street', 'service', 'pedestrian', 'track', 'road', 'footway', 'bridleway', 'steps', 'path') \n";
    private final String FOOT = "\tAND (l.foot <> 'no' OR l.foot IS NULL))";
    private final String HIGHWAY = "\tOR (l.highway='cycleway' and l.foot='yes'))\n";
    private final String END_LINE_SUBQUERY = ") as T2\n";
    private final String JOIN = "WHERE T1.id = T2.osm_id";
    private String sql;

    @Before
    public void setUp() {
        qb = new WayQueryBuilderSeparated();
        calc = new ScaledBBCalculator();
        qd = new WayQueryDirector(qb, calc);

        sql = TOP_SELECT + WAYS_SUBQUERY + LINE_SUBQUERY_SELECT + SELECT_LENGTH + SELECT_CORDS + SELECT_START_ELEVATION +
                SELECT_END_ELEVATION + FROM;
    }

    @Test
    public void testPreparedStatementCoordsCorrectOne() {
        qd.buildQuery(51.446, -0.125, 15000);
        double[] BBCords = calc.calcBoundingBox(51.446, -0.125, 15000);

        String newBB = String.format("\tWHERE l.way && ST_Transform( ST_MakeEnvelope(%s,%s,%s,%s, 4326),4326)\n",
                BBCords[0], BBCords[1], BBCords[2], BBCords[3]);

        sql += newBB + ROAD_OPTIONS +FOOT + HIGHWAY  + END_LINE_SUBQUERY + JOIN;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }

    @Test
    public void testPreparedStatementCoordsCorrectTwo() {
        qd.buildQuery(25, 0, 0.2);
        double[] BBCords = calc.calcBoundingBox(25, 0, 0.2);

        String newBB = String.format("\tWHERE l.way && ST_Transform( ST_MakeEnvelope(%s,%s,%s,%s, 4326),4326)\n",
                BBCords[0], BBCords[1], BBCords[2], BBCords[3]);

        sql += newBB + ROAD_OPTIONS +FOOT + HIGHWAY  + END_LINE_SUBQUERY + JOIN;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }

    @Test
    public void testPreparedStatementOptionsCorrectOne() {

        double[] BBCords = calc.calcBoundingBox(50, 0, 5);

        qd.setOptions(new boolean[] {true, false, false, false, false, false, false, false, false,
                false, false, false, false, true, true}); // set the new options
        qd.buildQuery(50, 0, 5);


        String newBB = String.format("\tWHERE l.way && ST_Transform( ST_MakeEnvelope(%s,%s,%s,%s, 4326),4326)\n",
                BBCords[0], BBCords[1], BBCords[2], BBCords[3]);

        String newRoadOptions = "\tAND ((l.highway IN ('trunk', '', '', ''," +
                " '', '', '', '', '', '', '', '', '', 'steps', 'path') \n";

        sql += newBB + newRoadOptions +FOOT + HIGHWAY  + END_LINE_SUBQUERY + JOIN;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }


    @Test
    public void testPreparedStatementOptionsCorrectTwo() {

        double[] BBCords = calc.calcBoundingBox(50, 0, 5);

        qd.setOptions(new boolean[] {false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false}); // set the new options
        qd.buildQuery(50, 0, 5);


        String newBB = String.format("\tWHERE l.way && ST_Transform( ST_MakeEnvelope(%s,%s,%s,%s, 4326),4326)\n",
                BBCords[0], BBCords[1], BBCords[2], BBCords[3]);

        String newRoadOptions = "\tAND ((l.highway IN ('', '', '', ''," +
                " '', '', '', '', '', '', '', '', '', '', '') \n";

        sql += newBB + newRoadOptions +FOOT + HIGHWAY  + END_LINE_SUBQUERY + JOIN;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }
}