package com.lee.runrouter.dbconnection.queries;

import com.lee.runrouter.bbcalculator.BBCalculator;
import com.lee.runrouter.bbcalculator.ScaledBBCalculator;
import org.junit.Before;
import org.junit.Test;

import java.sql.SQLException;

import static org.junit.Assert.*;

public class WayQueryBuilderWithinTest {
    QueryDirector qd;
    BBCalculator calc;
    QueryBuilder qb;

    // the PostGIS SQL query
    private final String SELECT = "SELECT id, tags, nodes, length, coords, startElevation, endElevation \n";
    private final String FROM = "\tFROM lineCombinedWithWay \n";
    private final String ROAD_OPTIONS = "\tAND ((highway IN ('trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential', 'living_street', 'service', 'pedestrian', 'track', 'road', 'footway', 'bridleway', 'steps', 'path') \n";
    private final String FOOT = "\tAND (foot <> 'no' OR foot IS NULL))";
    private final String END = "\tOR (highway='cycleway' and foot='yes'))";
    private String sql;

    @Before
    public void setUp() throws SQLException, ClassNotFoundException {
        qb = new WayQueryBuilderWithin();
        qd = new WayQueryDirectorWithin(qb, calc);

        sql = SELECT + FROM;
    }

    @Test
    public void testPreparedStatementCoordsCorrectOne() {
        double runLength = 5000;
        qd.buildQuery(52, 4, runLength);
        double[] origin = {52, 4};

        String newBB = String.format("\tWHERE ST_DWithin(way, ST_MakePoint(%s, %s)::geography, %s)\n",
                origin[1], origin[0], runLength);

        sql += newBB + ROAD_OPTIONS + FOOT + END;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }

    @Test
    public void testPreparedStatementCoordsCorrectTwo() {
        double runLength = 0.2;
        qd.buildQuery(25, 0, runLength);
        double[] origin = {25, 0};

        String newBB = String.format("\tWHERE ST_DWithin(way, ST_MakePoint(%s, %s)::geography, %s)\n",
                origin[1], origin[0], runLength);

        sql += newBB + ROAD_OPTIONS + FOOT + END;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }

    @Test
    public void testPreparedStatementOptionsCorrectOne() {
        qd.setOptions(new boolean[] {true, false, false, false, false, false, false, false, false,
                false, false, false, false, true, true}); // set the new options
        double runLength = 5;

        qd.buildQuery(25, 0, runLength);
        double[] origin = {25, 0};

        String newBB = String.format("\tWHERE ST_DWithin(way, ST_MakePoint(%s, %s)::geography, %s)\n",
                origin[1], origin[0], runLength);

        String newRoadOptions = "\tAND ((highway IN ('trunk', '', '', ''," +
                " '', '', '', '', '', '', '', '', '', 'steps', 'path') \n";

        sql += newBB + newRoadOptions + FOOT + END;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }


    @Test
    public void testPreparedStatementOptionsCorrectTwo() {
        qd.setOptions(new boolean[] {false, false, false, false, false, false, false, false, false,
                false, false, false, false, false, false}); // set the new options

        double runLength = 5;
        qd.buildQuery(50, 0, runLength);
        double[] origin = {50, 0};

        String newBB = String.format("\tWHERE ST_DWithin(way, ST_MakePoint(%s, %s)::geography, %s)\n",
                origin[1], origin[0], runLength);

        String newRoadOptions = "\tAND ((highway IN ('', '', '', ''," +
                " '', '', '', '', '', '', '', '', '', '', '') \n";

        sql += newBB + newRoadOptions + FOOT + END;

        assertEquals(sql, qd.ps.toString()); // Assert the query string generated by the query director is
        // equal to the required query string
    }
}